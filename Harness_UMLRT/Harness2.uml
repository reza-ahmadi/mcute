<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_fuzjcGdiEeiqifykceCvxw" name="mCUTE">
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_fuzjcWdiEeiqifykceCvxw" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_fuzjcmdiEeiqifykceCvxw" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_XBD94GgrEeijRtS4FXxxtA" source="UMLRT_Default_top">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_XBEk8GgrEeijRtS4FXxxtA" key="top_name" value="CUTE__MAIN__DRC"/>
    </eAnnotations>
    <packagedElement xmi:type="uml:Class" xmi:id="_hpaO8GdiEeiqifykceCvxw" name="DyeingRunController" classifierBehavior="_jPbKgGdiEeiqifykceCvxw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_GQwmUGdjEeiqifykceCvxw" name="protocol1" type="_oIRIwGdiEeiqifykceCvxw" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_OePlIGdjEeiqifykceCvxw" name="Temprature" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OePlIWdjEeiqifykceCvxw" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_M4ddoGdkEeiqifykceCvxw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ugLW4GgvEeijRtS4FXxxtA" name="cuteCommands" visibility="public" type="_FiiUsGgvEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_dTSeIH8aEeipA49rzMw2KQ" name="DesiredLevel" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_dTSeIX8aEeipA49rzMw2KQ" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_-d3XEICjEeib_vS042iOdQ" name="HighTemps" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_-d3XEYCjEeib_vS042iOdQ" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7W70QORtEeiwK5UPZ22vmQ" name="_LoopBack" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_7W70QeRtEeiwK5UPZ22vmQ" value="0"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_jPbKgGdiEeiqifykceCvxw" name="DRCStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_jRBF8GdiEeiqifykceCvxw" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_jROhUGdiEeiqifykceCvxw" name="Initial" source="_jREJQGdiEeiqifykceCvxw" target="_bigO0N7GEeiBkYD2qJeUwg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Lx3LcGg0EeijRtS4FXxxtA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>//cuteCommands.newTransition(INITIAL).send();
//default values
DesiredLevel=5;
Temprature=50;
//Time=20;

//Initializing the Symbolic Interpreter
//__CrestInit();

</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_yFV14GdiEeiqifykceCvxw" name="t2" guard="_4jF6gH8eEeipA49rzMw2KQ" source="_jRLeAGdiEeiqifykceCvxw" target="_xgSBAGdiEeiqifykceCvxw">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_4jF6gH8eEeipA49rzMw2KQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_4jF6gX8eEeipA49rzMw2KQ">
                <language>C++</language>
                <body>return (Temprature>0 &amp;&amp; Temprature &lt;100 &amp;&amp; DesiredLevel > 0);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rbYGAGdnEeijRtS4FXxxtA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>  __CrestInit();
    __CrestCall(1, 1);
#line 11
  __CrestInt(&amp; tank1);
#line 12
  __CrestInt(&amp; tank2);
#line 13
  __CrestInt(&amp; solution);
#line 14
  __CrestInt(&amp; drain);
  __CrestLoad(4, (unsigned long )(&amp; tank1), (long long )tank1);
  __CrestLoad(3, (unsigned long )0, (long long )0);
  __CrestApply2(2, 12, (long long )(tank1 == 0));
#line 16
  if (tank1 == 0) {
    __CrestBranch(5, 3, 1);
    {
    __CrestLoad(9, (unsigned long )(&amp; tank2), (long long )tank2);
    __CrestLoad(8, (unsigned long )0, (long long )0);
    __CrestApply2(7, 12, (long long )(tank2 == 0));
#line 16
    if (tank2 == 0) {
      __CrestBranch(10, 4, 1);
#line 17
      printf((char const   * __restrict  )&quot;----branch visited: tank1==0 &amp;&amp; tank2 == 0 ----\n&quot;);
      __CrestClearStack(12);
      {
      __CrestLoad(15, (unsigned long )(&amp; solution), (long long )solution);
      __CrestLoad(14, (unsigned long )0, (long long )0);
      __CrestApply2(13, 14, (long long )(solution > 0));
#line 18
      if (solution > 0) {
        __CrestBranch(16, 6, 1);
#line 19
        printf((char const   * __restrict  )&quot;----branch visited: solution>0 ----\n&quot;);
        __CrestClearStack(18);
      } else {
        __CrestBranch(17, 7, 0);
#line 21
        printf((char const   * __restrict  )&quot;----branch visited: !(solution>0) ----\n&quot;);
        __CrestClearStack(19);
      }
      }
    } else {
      __CrestBranch(11, 8, 0);
#line 16
      goto _L;
    }
    }
  } else {
    __CrestBranch(6, 9, 0);
    _L: /* CIL Label */ 
#line 25
    printf((char const   * __restrict  )&quot;----branch visited: !(tank1==0 &amp;&amp; tank2 == 0) ----\n&quot;);
    __CrestClearStack(20);
    {
    __CrestLoad(23, (unsigned long )(&amp; drain), (long long )drain);
    __CrestLoad(22, (unsigned long )0, (long long )0);
    __CrestApply2(21, 14, (long long )(drain > 0));
#line 26
    if (drain > 0) {
      __CrestBranch(24, 11, 1);
#line 27
      printf((char const   * __restrict  )&quot;----branch visited: drain>0 ----\n&quot;);
      __CrestClearStack(26);
    } else {
      __CrestBranch(25, 12, 0);

    }
    }
  }
  __CrestReturn(27);
#line 7

__CrestWriteSE();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_HIYx4GdjEeiqifykceCvxw" event="_qLyfsGdiEeiqifykceCvxw" port="_GQwmUGdjEeiqifykceCvxw"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_5zIWAGgoEeijRtS4FXxxtA" name="t1" source="_bigO0N7GEeiBkYD2qJeUwg" target="_jRLeAGdiEeiqifykceCvxw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MVmxsGg0EeijRtS4FXxxtA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    int __retres6;
    //Initializing the Symbolic Interpreter
    __CrestInit();
    __CrestCall(1, 1);
    __CrestLoad(2, (unsigned long )0, (long long )0);
    __CrestStore(3, (unsigned long )(&amp; HighTemps));
    #line 11
    HighTemps = 0;
    #line 13
    __CrestInt(&amp; desiredLevel);
    #line 14
    __CrestInt(&amp; temprature);
    __CrestLoad(6, (unsigned long )(&amp; HighTemps), (long long )HighTemps);
    __CrestLoad(5, (unsigned long )0, (long long )9);
    __CrestApply2(4, 15, (long long )(HighTemps &lt;= 9));
    #line 16
    if (HighTemps &lt;= 9) {
    __CrestBranch(7, 3, 1);
    #line 17
    printf((char const   * __restrict  )&quot;warning: engine worked too many times with high temprature\n&quot;);
    __CrestClearStack(9);
    {
    __CrestLoad(12, (unsigned long )(&amp; desiredLevel), (long long )desiredLevel);
    __CrestLoad(11, (unsigned long )0, (long long )0);
    __CrestApply2(10, 14, (long long )(desiredLevel > 0));
    #line 18
    if (desiredLevel > 0) {
    __CrestBranch(13, 5, 1);
    __CrestLoad(15, (unsigned long )(&amp; desiredLevel), (long long )desiredLevel);
    __CrestStore(16, (unsigned long )(&amp; DesiredLevel));
    #line 19
    DesiredLevel = desiredLevel;
    #line 20
    printf((char const   * __restrict  )&quot;----branch visited: desiredLevel>0----\n&quot;);
    __CrestClearStack(17);
    } else {
    __CrestBranch(14, 6, 0);
    }
    }
    {
    __CrestLoad(20, (unsigned long )(&amp; temprature), (long long )temprature);
    __CrestLoad(19, (unsigned long )0, (long long )0);
    __CrestApply2(18, 14, (long long )(temprature > 0));
    #line 22
    if (temprature > 0) {
    __CrestBranch(21, 8, 1);
    #line 23
    printf((char const   * __restrict  )&quot;----branch visited: temprature>0----\n&quot;);
    __CrestClearStack(23);
    __CrestLoad(24, (unsigned long )(&amp; temprature), (long long )temprature);
    __CrestStore(25, (unsigned long )(&amp; Temprature));
    #line 24
    Temprature = temprature;
    {
    __CrestLoad(28, (unsigned long )(&amp; Temprature), (long long )Temprature);
    __CrestLoad(27, (unsigned long )0, (long long )90);
    __CrestApply2(26, 17, (long long )(Temprature >= 90));
    #line 25
    if (Temprature >= 90) {
    __CrestBranch(29, 10, 1);
    __CrestLoad(33, (unsigned long )(&amp; HighTemps), (long long )HighTemps);
    __CrestLoad(32, (unsigned long )0, (long long )1);
    __CrestApply2(31, 0, (long long )(HighTemps + 1));
    __CrestStore(34, (unsigned long )(&amp; HighTemps));
    #line 26
    HighTemps ++;
    #line 27
    printf((char const   * __restrict  )&quot;----branch visited: temprature>=90----\n&quot;);
    __CrestClearStack(35);
    } else {
    __CrestBranch(30, 11, 0);
    __CrestLoad(38, (unsigned long )(&amp; HighTemps), (long long )HighTemps);
    __CrestLoad(37, (unsigned long )0, (long long )1);
    __CrestApply2(36, 1, (long long )(HighTemps - 1));
    __CrestStore(39, (unsigned long )(&amp; HighTemps));
    #line 30
    HighTemps --;
    #line 31
    printf((char const   * __restrict  )&quot;----branch visited: !(temprature>=90)----\n&quot;);
    __CrestClearStack(40);
    }
    }
    } else {
    __CrestBranch(22, 12, 0);
    #line 35
    printf((char const   * __restrict  )&quot;----branch visited: !(temprature>0)----\n&quot;);
    __CrestClearStack(41);
    }
    }
    } else {
    __CrestBranch(8, 13, 0);
    #line 38
    printf((char const   * __restrict  )&quot;warning: engine NOT worked too many times with high temprature&quot;);
    __CrestClearStack(42);
    }
    __CrestLoad(43, (unsigned long )0, (long long )0);
    __CrestStore(44, (unsigned long )(&amp; __retres6));
    #line 40
    __retres6 = 0;
    __CrestLoad(45, (unsigned long )(&amp; __retres6), (long long )__retres6);
    __CrestReturn(46);
    #line 8
    printf (&quot;MUT: the variable values are, desiredLevel: %d, temprature: %d\n&quot;, desiredLevel, temprature);
    __CrestWriteSE();
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_bcGQsGgpEeijRtS4FXxxtA" event="_CXoYoGdjEeiqifykceCvxw" port="_GQwmUGdjEeiqifykceCvxw"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_vaGlQIY7EeiKGobklzfqdw" name="reset2" source="_xgSBAGdiEeiqifykceCvxw" target="_jRLeAGdiEeiqifykceCvxw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_sHfQQJK4EeiPG4gJcsWGbA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    //restore previously saved global variables 
	//Todo

//cuteCommands.newIteration().send();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_xthZYIY7EeiKGobklzfqdw" event="_a97JIGg4EeijRtS4FXxxtA" port="_ugLW4GgvEeijRtS4FXxxtA"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_doiSwOEtEeiBkYD2qJeUwg" name="reset1" kind="external" source="_jRLeAGdiEeiqifykceCvxw" target="_bigO0N7GEeiBkYD2qJeUwg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y5o44OEtEeiBkYD2qJeUwg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    //restore previously saved global variables 
	//Todo

//cuteCommands.newIteration().send();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_mUkOwOEtEeiBkYD2qJeUwg" event="_a97JIGg4EeijRtS4FXxxtA" port="_ugLW4GgvEeijRtS4FXxxtA"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_rczS0ORtEeiwK5UPZ22vmQ" name="" kind="external" source="_xgSBAGdiEeiqifykceCvxw" target="_bigO0N7GEeiBkYD2qJeUwg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_HzolgORuEeiwK5UPZ22vmQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>_LoopBack=1;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_E422cORuEeiwK5UPZ22vmQ" event="_CveIEORuEeiwK5UPZ22vmQ" port="_ugLW4GgvEeijRtS4FXxxtA"/>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_jREJQGdiEeiqifykceCvxw"/>
          <subvertex xmi:type="uml:State" xmi:id="_jRLeAGdiEeiqifykceCvxw" name="Setup">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_GEHmgGgpEeijRtS4FXxxtA" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>    //save global variables for future executions
	//Todo

log.log (&quot;@@@@ MUT: Setup---!\n&quot;);

    cuteCommands.newState(SETUP).send();
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_xgSBAGdiEeiqifykceCvxw" name="Filling">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_G9JgQGgpEeijRtS4FXxxtA" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>    //save global variables for future executions
	//Todo

log.log (&quot;@@@@ MUT: filling---!\n&quot;);
cuteCommands.newState(FILLING).send();</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_bigO0N7GEeiBkYD2qJeUwg" name="Init">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_oGq6AN7GEeiBkYD2qJeUwg" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>    //save global variables for future executions
	//Todo

log.log (&quot;@@@@ MUT: Init---!\n&quot;);

if (_LoopBack==0){
    cuteCommands.newState(INIT).send();
}else
	_LoopBack=0;
</body>
            </entry>
          </subvertex>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_oIUzIGdiEeiqifykceCvxw" name="Protocol1">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_oIRIwGdiEeiqifykceCvxw" name="Protocol1">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_oIaSsGdiEeiqifykceCvxw" client="_oIRIwGdiEeiqifykceCvxw" supplier="_oIYdgGdiEeiqifykceCvxw" contract="_oIYdgGdiEeiqifykceCvxw"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_oIiOgGdiEeiqifykceCvxw" client="_oIRIwGdiEeiqifykceCvxw" supplier="_oIfyQGdiEeiqifykceCvxw" contract="_oIfyQGdiEeiqifykceCvxw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_oIYdgGdiEeiqifykceCvxw" name="Protocol1">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_qLwqgGdiEeiqifykceCvxw" name="start">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_1wHYsORMEeitooxfkYAKHg" name="tank1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2BmxUORMEeitooxfkYAKHg" name="tank2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2ESR4ORMEeitooxfkYAKHg" name="solution">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2GfRUORMEeitooxfkYAKHg" name="drain">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_CXnKgGdjEeiqifykceCvxw" name="setup">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_CXnKgWdjEeiqifykceCvxw" name="desiredLevel">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_bj2ywH8YEeipA49rzMw2KQ" name="temprature">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Sr3UsGgqEeijRtS4FXxxtA" name="reset"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_VIXn8H8WEeipA49rzMw2KQ" name="abort"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_aNEQ4H8WEeipA49rzMw2KQ" name="dye"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_b5UXUH8WEeipA49rzMw2KQ" name="drain"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_dCLc0H8WEeipA49rzMw2KQ" name="level">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_qr7vsH8ZEeipA49rzMw2KQ" name="amount">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_oIcu8GdiEeiqifykceCvxw" name="Protocol1~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_oIekIGdiEeiqifykceCvxw" client="_oIRIwGdiEeiqifykceCvxw" supplier="_oIcu8GdiEeiqifykceCvxw"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_oIfLMGdiEeiqifykceCvxw" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_oIfyQGdiEeiqifykceCvxw" name="Protocol1IO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_oIiOgWdiEeiqifykceCvxw" client="_oIRIwGdiEeiqifykceCvxw" supplier="_oIfyQGdiEeiqifykceCvxw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_qLyfsGdiEeiqifykceCvxw" operation="_qLwqgGdiEeiqifykceCvxw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_CXoYoGdjEeiqifykceCvxw" operation="_CXnKgGdjEeiqifykceCvxw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Sr6YAGgqEeijRtS4FXxxtA" operation="_Sr3UsGgqEeijRtS4FXxxtA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_VIaEMH8WEeipA49rzMw2KQ" operation="_VIXn8H8WEeipA49rzMw2KQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_aNGGEH8WEeipA49rzMw2KQ" operation="_aNEQ4H8WEeipA49rzMw2KQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_b5XaoH8WEeipA49rzMw2KQ" operation="_b5UXUH8WEeipA49rzMw2KQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dCOgIH8WEeipA49rzMw2KQ" operation="_dCLc0H8WEeipA49rzMw2KQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_K8YA0GgnEeijRtS4FXxxtA" name="MCUTE">
      <packagedElement xmi:type="uml:Class" xmi:id="_ZSoUsGgnEeijRtS4FXxxtA" name="CUTE_Harness" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_rximYGgvEeijRtS4FXxxtA" name="commands" visibility="public" type="_FiiUsGgvEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_z-v4YGgvEeijRtS4FXxxtA" name="data" visibility="public" type="_oIRIwGdiEeiqifykceCvxw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_NjzxkGgxEeijRtS4FXxxtA" name="ActionCodeBranches" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_RAiXIGgxEeijRtS4FXxxtA" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_iqHc8GgxEeijRtS4FXxxtA" name="timingRunning" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wUrIcGgxEeijRtS4FXxxtA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_d2aWAGg0EeijRtS4FXxxtA" name="States" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_d2aWAWg0EeijRtS4FXxxtA" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_d84xcGg0EeijRtS4FXxxtA" name="Transitions" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_d84xcWg0EeijRtS4FXxxtA" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_gsG2IGhHEeijRtS4FXxxtA" name="settings" visibility="public" type="_CV8wAWhHEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_dxTFUH5VEeipA49rzMw2KQ" name="next_t" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_UcsUAH_iEeiMFcUmhpquNg" name="RunningTime" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UcsUAX_iEeiMFcUmhpquNg" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_2fNpAICkEeib_vS042iOdQ" name="LoopBound" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_2fNpAYCkEeib_vS042iOdQ" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_rs2nwICmEeib_vS042iOdQ" name="LoopExecutions" visibility="public"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_ErnuUH_qEeiMFcUmhpquNg" name="VisitedBranches" visibility="public"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_rujXUH_qEeiMFcUmhpquNg" name="VisitedTransitions" visibility="public"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_r5SAoH_qEeiMFcUmhpquNg" name="VisitedStates" visibility="public"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_DtF10IVWEeiKGobklzfqdw" name="strategyObj" visibility="public"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_2OVhMKcAEeii3rHGIK9rRQ" name="TExecutions" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_2OVhMacAEeii3rHGIK9rRQ" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_DU9yIN7ZEeiBkYD2qJeUwg" name="TotalIterationsPromised" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_DU9yId7ZEeiBkYD2qJeUwg" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_DXKxkN7ZEeiBkYD2qJeUwg" name="TotalIterationsExecuted" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_DXKxkd7ZEeiBkYD2qJeUwg" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_Fp9s4OFFEeiBkYD2qJeUwg" name="Curr_State" visibility="public" type="_TEwR0H5PEeipA49rzMw2KQ"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_SkthcOIIEeitsrWbfpHoZQ" name="timingReport" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_hekjgOLKEeiS-ZARNzPJ8Q" name="timingEventConsume" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_88L7sON5EeiS-ZARNzPJ8Q" name="Depth" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_88L7seN5EeiS-ZARNzPJ8Q" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_tP7n8OOqEeiS-ZARNzPJ8Q" name="TransitionIterations" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_tP7n8eOqEeiS-ZARNzPJ8Q" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_9AkscON5EeiS-ZARNzPJ8Q" name="Constraints" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_9AksceN5EeiS-ZARNzPJ8Q" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_8ciGQOOwEeiS-ZARNzPJ8Q" name="timingReadFile" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_uS3LgOaSEeiwK5UPZ22vmQ" name="timingRunningId" visibility="public">
          <type xmi:type="uml:Class" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_KvXXoOavEeiwK5UPZ22vmQ" name="CoverageInfo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_FrDiEGgwEeijRtS4FXxxtA" name="StateMachineCuteHarness" isReentrant="false">
          <region xmi:type="uml:Region" xmi:id="_FrHMcGgwEeijRtS4FXxxtA" name="Region">
            <transition xmi:type="uml:Transition" xmi:id="_FrNTEWgwEeijRtS4FXxxtA" name="" source="_2YhyQH_gEeiMFcUmhpquNg" target="_KIQUUOQ-EeitooxfkYAKHg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_YtFSUG6jEeisYt_0zxy50Q" name="Effect" isReentrant="false">
                <language>C++</language>
                <body>RunningTime = execTime;
TransitionIterations = transitionIterations;
if (totalIterations>0) {
	TotalIterationsPromised = totalIterations;
}
TotalIterationsExecuted=0;
log.log(&quot;\n------------------------------------------\n&quot;);
log.log (&quot;Running MCUTE with the following settings:\n&quot;);
log.log(&quot;Strategy = %s, Execution time = %d, Transition Iterations = %d, Total Iterations (for all transitions)= %d \n&quot;, strategy, RunningTime, TransitionIterations, TotalIterationsPromised);
log.log(&quot;------------------------------------------\n&quot;);
//all states, transition, branches are set statically
States=3;
Transitions=2;
ActionCodeBranches=6;
//loop execution default values for all transitions with loop
//LoopExecutions[T2]=0;
//strategy = new crest::RandomSearch(&quot;&quot;, 1);
//    umlCUTE cute;
//   cute.addXXX(100,200);
//end
if (RunningTime>0) {
	timingRunningId = timingRunning.informIn(UMLRTTimespec(RunningTime,0));

}else
{
   timingRunningId = timingRunning.informIn(UMLRTTimespec(4,0));
}
//for random numbers
srand (time(NULL));
next_t=&quot;t1&quot;;
Curr_State=INIT;
</body>
              </effect>
              <trigger xmi:type="uml:Trigger" xmi:id="_wdhG0GmvEeiLpMcT--nfLg" event="_JglVQGhIEeijRtS4FXxxtA" port="_gsG2IGhHEeijRtS4FXxxtA"/>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_VmZH8GgxEeijRtS4FXxxtA" name="Max_Reached" guard="_Icn2kKcBEeii3rHGIK9rRQ" source="_cBWz0KPHEeii3rHGIK9rRQ" target="_vFIAMOIDEeitsrWbfpHoZQ">
              <ownedRule xmi:type="uml:Constraint" xmi:id="_Icn2kKcBEeii3rHGIK9rRQ">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_IcpEsKcBEeii3rHGIK9rRQ">
                  <language>C++</language>
                  <body>return TotalIterationsPromised > 0 &amp;&amp; TotalIterationsExecuted >= TotalIterationsPromised;
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_b17OIOIIEeitsrWbfpHoZQ" name="Effect" isReentrant="false">
                <language>C++</language>
                <body>timingReport.informIn(UMLRTTimespec(1,1));
log.log(&quot;---------------------- choice2, false ---------------------------\n&quot;);</body>
              </effect>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_EuVzoH5UEeipA49rzMw2KQ" name="Exec_New_Transition_Or_Max_Reached" source="_KNFQkOE2EeiBkYD2qJeUwg" target="_cBWz0KPHEeii3rHGIK9rRQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_pvU34OO-EeitooxfkYAKHg" name="Effect" isReentrant="false">
                <language>C++</language>
                <body>log.log(&quot;---------------------- choice2 ---------------------------\n&quot;);</body>
              </effect>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_6UmmQH_gEeiMFcUmhpquNg" source="_FrJBoGgwEeijRtS4FXxxtA" target="_ayVIUORnEeiwK5UPZ22vmQ"/>
            <transition xmi:type="uml:Transition" xmi:id="_EKmcYLq4Eeii3rHGIK9rRQ" name="" source="_FrLd4GgwEeijRtS4FXxxtA" target="_UtmewGgxEeijRtS4FXxxtA">
              <trigger xmi:type="uml:Trigger" xmi:id="_M4JbULq4Eeii3rHGIK9rRQ" port="_iqHc8GgxEeijRtS4FXxxtA">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_bKhdgOIEEeitsrWbfpHoZQ" name="" kind="external" source="_vFIAMOIDEeitsrWbfpHoZQ" target="_vFIAMOIDEeitsrWbfpHoZQ">
              <trigger xmi:type="uml:Trigger" xmi:id="_cNk18OIEEeitsrWbfpHoZQ" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
              <trigger xmi:type="uml:Trigger" xmi:id="_N0aikOIFEeitsrWbfpHoZQ" event="_YilhYGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
              <trigger xmi:type="uml:Trigger" xmi:id="_Z5qdIOIFEeitsrWbfpHoZQ" event="_KK5UsOE1EeiBkYD2qJeUwg" port="_rximYGgvEeijRtS4FXxxtA"/>
              <trigger xmi:type="uml:Trigger" xmi:id="_au5cAOIFEeitsrWbfpHoZQ" event="_OdRbEGgvEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_YNquAOIIEeitsrWbfpHoZQ" name="" kind="external" source="_vFIAMOIDEeitsrWbfpHoZQ" target="_UtmewGgxEeijRtS4FXxxtA">
              <trigger xmi:type="uml:Trigger" xmi:id="_clPyQOIIEeitsrWbfpHoZQ" port="_SkthcOIIEeitsrWbfpHoZQ">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_Qfeu0OO_EeitooxfkYAKHg" name="" guard="_TOlZYOO_EeitooxfkYAKHg" kind="external" source="_cBWz0KPHEeii3rHGIK9rRQ" target="_KIQUUOQ-EeitooxfkYAKHg">
              <ownedRule xmi:type="uml:Constraint" xmi:id="_TOlZYOO_EeitooxfkYAKHg">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_TOlZYeO_EeitooxfkYAKHg">
                  <language>C++</language>
                  <body>return ! (TotalIterationsPromised > 0 &amp;&amp; TotalIterationsExecuted >= TotalIterationsPromised);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_R3aLEOO_EeitooxfkYAKHg" name="Effect" isReentrant="false">
                <language>C++</language>
                <body>log.log(&quot;---------------------- choice2, true ---------------------------\n&quot;);</body>
              </effect>
            </transition>
            <transition xmi:type="uml:Transition" xmi:id="_fnsUwORnEeiwK5UPZ22vmQ" name="" kind="external" source="_ayVIUORnEeiwK5UPZ22vmQ" target="_2YhyQH_gEeiMFcUmhpquNg">
              <trigger xmi:type="uml:Trigger" xmi:id="_oqCfAORnEeiwK5UPZ22vmQ" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_FrJBoGgwEeijRtS4FXxxtA"/>
            <subvertex xmi:type="uml:State" xmi:id="_FrLd4GgwEeijRtS4FXxxtA" name="MCUTE__DFS_Testing">
              <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_KNFQkOE2EeiBkYD2qJeUwg" kind="exitPoint"/>
              <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_KIQUUOQ-EeitooxfkYAKHg" kind="entryPoint"/>
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_7OwGsOFOEeitsrWbfpHoZQ" name="SelectCandidateTransition" isReentrant="false">
                <language>C++</language>
                <body>
//*****************************************************************
//**** deciding what is the next transition to be executed ********
//*****************************************************************

log.log (&quot;--- \n Selecting the next transition for execution ----\n&quot;);

if (Curr_State==INIT){
	//it is possible to run t1
	next_t = &quot;t1&quot;;
	log.log (&quot;Curr state: INIT&quot;);
}else if (Curr_State==SETUP){
	//it is possible to run t2
	next_t = &quot;t2&quot;;
	log.log (&quot;Curr state: SETUP&quot;);
}
else{
	log.log (&quot;Curr state: last state. Restarting..&quot;);
	commands.loopBack().send(); //to be able to re-execute the previous transitions
	log.log (&quot;++++++Harness: msg 'loopBack' sent&quot;);
	Curr_State=INIT;
	next_t = &quot;t1&quot;;
}

//initialize the coverage info object for the transition
CoverageInfo.transition = next_t;
</body>
              </entry>
              <region xmi:type="uml:Region" xmi:id="_GjyEYGgxEeijRtS4FXxxtA" name="Region1">
                <transition xmi:type="uml:Transition" xmi:id="_LKRRkOE2EeiBkYD2qJeUwg" name="TransitionExecuted [All_Branches_Covered?]" kind="external" source="_jodUMOE1EeiBkYD2qJeUwg" target="_TIhPoOE4EeiBkYD2qJeUwg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_16h1AOFDEeiBkYD2qJeUwg" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>TotalIterationsExecuted++;

//update/measure the visited branches
//can we continue the previous transition?

//to track visited states
Curr_State = static_cast&lt;STATES>(*((int*) rtdata));
if(std::find(VisitedStates.begin(), VisitedStates.end(), Curr_State) == VisitedStates.end()){
	VisitedStates.push_back(Curr_State);
}

if (Curr_State==INIT){
	log.log(&quot;state is INIT&quot;);
}else if (Curr_State==SETUP){
	log.log(&quot;state is SETUP&quot;);
}



</body>
                  </effect>
                  <trigger xmi:type="uml:Trigger" xmi:id="_mJ3GsOFFEeiBkYD2qJeUwg" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_awz2sOE4EeiBkYD2qJeUwg" name="YES_Exec_Next_Transition" guard="_smS3QOO5EeiS-ZARNzPJ8Q" kind="external" source="_TIhPoOE4EeiBkYD2qJeUwg" target="_KNFQkOE2EeiBkYD2qJeUwg">
                  <ownedRule xmi:type="uml:Constraint" xmi:id="_smS3QOO5EeiS-ZARNzPJ8Q">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_smS3QeO5EeiS-ZARNzPJ8Q">
                      <language>C++</language>
                      <body>//return as soon as a transition has been executed the maximum number of iterations
//or the whole state machine has been executed the maximum number of iterations
return ( TotalIterationsExecuted >= TotalIterationsPromised) || ( Depth &lt; 0 );</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_j5VU4OO-EeitooxfkYAKHg" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>log.log(&quot;---------------------- choice1 false ---------------------------\n&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_cN0AMOE4EeiBkYD2qJeUwg" name="NO__Continue_Executing_Ex_Transition" kind="external" source="_TIhPoOE4EeiBkYD2qJeUwg" target="_nNdD0OLIEeiS-ZARNzPJ8Q">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_BC4MAOFQEeitsrWbfpHoZQ" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>log.log(&quot;---------------------- choice1 true ---------------------------\n&quot;);
//send reset message to execute the previous transition again 
commands.reset().send();
log.log (&quot;++++++Harness: msg 'reset' sent&quot;);</body>
                  </effect>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_s_t9gOFAEeiBkYD2qJeUwg" name="" kind="external" source="_-97_4ORcEeiwK5UPZ22vmQ" target="_tQgA8OOwEeiS-ZARNzPJ8Q">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8ISfEOIEEeitsrWbfpHoZQ" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>TotalIterationsExecuted++;

//ToDo: temp, just for test
// Read the symbolic execution object of the previous execution of the transition
//    SymbolicExecution ex;
//    std::ifstream in(&quot;szd_execution&quot;, std::ios::in | std::ios::binary);
//    ex.Parse(in);
//    in.close();
//	 DFS(0, 3, ex);

Curr_State = static_cast&lt;STATES>(*((int*) rtdata));
if (Curr_State==INIT){
	log.log(&quot;state is INIT&quot;);
}else if (Curr_State==SETUP){
	log.log(&quot;state is SETUP&quot;);
}

//restarting the transition
commands.reset().send();
log.log (&quot;++++++Harness: msg 'reset' sent&quot;);</body>
                  </effect>
                  <trigger xmi:type="uml:Trigger" xmi:id="_t-zb8OFAEeiBkYD2qJeUwg" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_sJFQUOLIEeiS-ZARNzPJ8Q" name="" kind="external" source="_nNdD0OLIEeiS-ZARNzPJ8Q" target="_jodUMOE1EeiBkYD2qJeUwg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_r_ObwOOvEeiS-ZARNzPJ8Q" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>log.log(&quot;---------------------- new iteration, Depth:%d, Total Iterations Executed: -----------------\n&quot;, Depth, TotalIterationsExecuted);


Curr_State = static_cast&lt;STATES>(*((int*) rtdata));
if (Curr_State==INIT){
	log.log(&quot;state is INIT&quot;);
}else if (Curr_State==SETUP){
	log.log(&quot;state is SETUP&quot;);
}</body>
                  </effect>
                  <trigger xmi:type="uml:Trigger" xmi:id="_x6WrYOLIEeiS-ZARNzPJ8Q" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_u2yCQOOwEeiS-ZARNzPJ8Q" name="" kind="external" source="_tQgA8OOwEeiS-ZARNzPJ8Q" target="_jodUMOE1EeiBkYD2qJeUwg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZmVuAOOxEeiS-ZARNzPJ8Q" name="Effect" isReentrant="false">
                    <language>C++</language>
                    <body>SymbolicExecution ex;
std::ifstream in(&quot;szd_execution&quot;, std::ios::in | std::ios::binary);
ex.Parse(in);
in.close();
Constraints=ex.path().constraints().size();
//number of iterations cannot be more than the number of constraints
//todo: should be fixed later with a better algorithm
//since for now we only negate constraints at most as number of times as the maximum number of constraints
Depth = (TransitionIterations>Constraints?Constraints:TransitionIterations) - 1;


Curr_State = static_cast&lt;STATES>(*((int*) rtdata));
if (Curr_State==INIT){
	log.log(&quot;state is INIT&quot;);
}else if (Curr_State==SETUP){
	log.log(&quot;state is SETUP&quot;);
}


</body>
                  </effect>
                  <trigger xmi:type="uml:Trigger" xmi:id="_GyqzoOOxEeiS-ZARNzPJ8Q" event="_YYw3AGgzEeijRtS4FXxxtA" port="_rximYGgvEeijRtS4FXxxtA"/>
                </transition>
                <transition xmi:type="uml:Transition" xmi:id="_UPj7gOQ-EeitooxfkYAKHg" kind="local" source="_KIQUUOQ-EeitooxfkYAKHg" target="_-97_4ORcEeiwK5UPZ22vmQ"/>
                <subvertex xmi:type="uml:State" xmi:id="_jodUMOE1EeiBkYD2qJeUwg" name="Negate_Solve_Gen_Inp">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_lD0lUOE9EeiBkYD2qJeUwg" name="Entry" isReentrant="false">
                    <language>C++</language>
                    <body>log.log (&quot;Harness: Negating_Solving_Gen, Depth is: %d&quot;, Depth);
if (Depth>=0){
    //handle iteration
    //0. read the symbolic execution object
    // Read the symbolic execution object of the previous execution of the transition
    SymbolicExecution ex;
    std::ifstream in(&quot;szd_execution&quot;, std::ios::in | std::ios::binary);
    ex.Parse(in);
    in.close();

    //1. negate and solve the PCs
    //ToDo: how to actually call SolveAtBranch
    vector&lt;value_t> input;
    printf(&quot;number of constraints are: %d&quot;, ex.path().constraints().size());
    //for (size_t i = 0; (i &lt; ex.path().constraints().size()); i++) {
	 //	if (i%2==1)
    printf(&quot;\n---Call SolveAtBranch, Depth: %d&quot;, Depth);
	 SolveAtBranch(ex, Depth, input);
    //}
	 Depth--;
    //print the generated inputs
    std::cout &lt;&lt; &quot;\n-----printing inputs generated by the Concolic engine-------\n&quot;;
    for (size_t i = 0; i &lt; input.size(); i++) {
    	std::cout &lt;&lt; &quot;:&quot; &lt;&lt; input[i] &lt;&lt; std::endl;
    }
    //write the inputs to a file, since SI object is initialized by these inputs
    fileutil::writeInputs(&quot;input&quot;, input);

    //2. send message to the current transition
    if (next_t == &quot;t1&quot;) {
    	data.setup(input[0], input[1]).send();
	log.log (&quot;++++++Harness: msg 'setup' sent&quot;);
    } else if (next_t == &quot;t2&quot;) {
    	data.start(input[0], input[1],input[0], input[1]).send();
	log.log (&quot;++++++Harness: msg 'start' sent&quot;);
    }

//updating the coverage information
CoverageInfo.updateCoverageInfo(ex);

}</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_TIhPoOE4EeiBkYD2qJeUwg" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_nNdD0OLIEeiS-ZARNzPJ8Q" name="Wait4Iteration"/>
                <subvertex xmi:type="uml:State" xmi:id="_P8Yv0ONyEeiS-ZARNzPJ8Q" name="_TMP_DBG_">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_X6U2wONyEeiS-ZARNzPJ8Q" name="Entry" isReentrant="false">
                    <language>C++</language>
                    <body>// Read the symbolic execution object of the previous execution of the transition
 SymbolicExecution ex;
 std::ifstream in(&quot;szd_execution&quot;, std::ios::in | std::ios::binary);
 ex.Parse(in);
 in.close();
 DFS(0, 10, ex);</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_tQgA8OOwEeiS-ZARNzPJ8Q" name="Restarting">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_BlAb8OOxEeiS-ZARNzPJ8Q" name="Entry" isReentrant="false">
                    <language>C++</language>
                    <body>//timingReadFile.informIn(UMLRTTimespec(0.5,0));</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_-97_4ORcEeiwK5UPZ22vmQ" name="GeneratingRandomData">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_AaA8UORdEeiwK5UPZ22vmQ" name="Entry" isReentrant="false">
                    <language>C++</language>
                    <body>
//initializing the coverage information
CoverageInfo.initCoverageInfo();

    //-------------------------------------------------
    //---- generate and send random data --------------
    //---- to the selected transition -----------------
    //-------------------------------------------------
    cout&lt;&lt;&quot;------------------------------------------&quot; &lt;&lt;endl;
    cout&lt;&lt;&quot;--------- executing the transition: &quot; &lt;&lt; next_t &lt;&lt;endl;
    cout&lt;&lt;&quot;------------------------------------------&quot; &lt;&lt;endl;
    //e.g., if next_t = &quot;t1&quot; send msg(X);
    //else send msg(Y);
    int imin = std::numeric_limits&lt;int>::min(); // min int value
    int imax = std::numeric_limits&lt;int>::max(); //max int value
    int inp1 = rand() % imax + imin;
    int inp2 = rand() % imax + imin;
    if (next_t==&quot;t1&quot;){
	log.log (&quot;++++++Harness: msg 'setup' sent&quot;);
    	data.setup(inp1, inp2).send();
    }else if (next_t==&quot;t2&quot;){
	log.log (&quot;++++++Harness: msg 'start' sent&quot;);
    	data.start(inp1,inp2,inp1,inp2).send();
    }


</body>
                  </entry>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_UtmewGgxEeijRtS4FXxxtA" name="Report">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ta7UIGgxEeijRtS4FXxxtA" name="Entry" isReentrant="false">
                <language>C++</language>
                <body>log.log(&quot;\n\n*************** Test execution done! ****************&quot;);
log.log(&quot;\nbranch coverage: %d out of %d &quot;, VisitedBranches.size(), ActionCodeBranches);
log.log(&quot;\nTransition coverage: %d out of %d&quot;, VisitedTransitions.size(), Transitions);
log.log(&quot;\nState coverage: %d out of %d\n&quot;, VisitedStates.size(), States);
log.log(&quot;*****************************************************\n&quot;);</body>
              </entry>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_2YhyQH_gEeiMFcUmhpquNg" name="Starting"/>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_cBWz0KPHEeii3rHGIK9rRQ" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_vFIAMOIDEeitsrWbfpHoZQ" name="Wait1Sec">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_7ilKkOaREeiwK5UPZ22vmQ" name="Entry" isReentrant="false">
                <language>C++</language>
                <body>//cancel the other timer
timingRunning.cancelTimer(timingRunningId);</body>
              </entry>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_ayVIUORnEeiwK5UPZ22vmQ" name="Init"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_XROgkOLcEeiS-ZARNzPJ8Q" name="DFSOpaqueBehavior" specification="_TelVYOLcEeiS-ZARNzPJ8Q">
          <language>C++</language>
          <body>std::cout&lt;&lt;&quot;DFS CALLED, depth:&quot;&lt;&lt;depth&lt;&lt;std::endl;
/* UMLRTGEN-USERREGION-BEGIN platform:/resource/MCUTE/Harness_UMLRT/Harness2.uml mCUTE::CUTE_Harness operation DFS */
SymbolicExecution cur_ex;
vector&lt;value_t> input;
const SymbolicPath&amp; path = prev_ex.path();
for (size_t i = pos; (i &lt; path.constraints().size()) &amp;&amp; (depth > 0); i++) {
	// Solve constraints[0..i].
	if (!SolveAtBranch(prev_ex, i, input)) {
		std::cout&lt;&lt;&quot;could not solve depth: &quot;&lt;&lt;i&lt;&lt;std::endl;
		continue;
	}
	// Run on those constraints.
	data.setup(0,0).send();
	commands.reset().send();
	//read the SE object after transition execution
	std::ifstream in(&quot;szd_execution&quot;, std::ios::in | std::ios::binary);
	cur_ex.Parse(in);
	in.close();
	//UpdateCoverage(cur_ex);
	// We successfully solved the branch, recurse.
	depth--;
	DFS(i+1, depth, cur_ex);
}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lysHIOHlEeitsrWbfpHoZQ" name="SolveAtBranchOpaqueBehavior" specification="_Y1TDoOHlEeitsrWbfpHoZQ">
          <language>C++</language>
          <body>const vector&lt;SymbolicPred*>&amp; constraints = ex.path().constraints();

	// Optimization: If any of the previous constraints are idential to the
	// branch_idx-th constraint, immediately return false.
	for (int i = static_cast&lt;int>(branch_idx) - 1; i >= 0; i--) {
		if (constraints[branch_idx]->Equal(*constraints[i]))
			return false;
	}

	vector&lt;const SymbolicPred*> cs(constraints.begin(),
			constraints.begin() + branch_idx + 1);
	map&lt;var_t, value_t> soln;
	constraints[branch_idx]->Negate();
	// fprintf(stderr, &quot;Yices . . . &quot;);
	bool success = YicesSolver::IncrementalSolve(ex.inputs(), ex.vars(), cs,
			&amp;soln);
	// fprintf(stderr, &quot;%d\n&quot;, success);
	constraints[branch_idx]->Negate();

	if (success) {
		// Merge the solution with the previous input to get the next
		// input.  (Could merge with random inputs, instead.)
		input = ex.inputs();
		// RandomInput(ex.vars(), input);

		typedef map&lt;var_t, value_t>::const_iterator SolnIt;
		for (SolnIt i = soln.begin(); i != soln.end(); ++i) {
			input[i->first] = i->second;
		}
		return true;
	}

	return false;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Y1TDoOHlEeitsrWbfpHoZQ" name="SolveAtBranch" concurrency="guarded" method="_lysHIOHlEeitsrWbfpHoZQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_uBd-EOHzEeitsrWbfpHoZQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_g5xMYOIREeitsrWbfpHoZQ" name="ex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hydu8OIREeitsrWbfpHoZQ" name="branch_idx">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_h2-bgOIREeitsrWbfpHoZQ" name="input">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_TelVYOLcEeiS-ZARNzPJ8Q" name="DFS" concurrency="guarded" method="_XROgkOLcEeiS-ZARNzPJ8Q">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_lTceIOLcEeiS-ZARNzPJ8Q" name="pos">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_l_wxkOLcEeiS-ZARNzPJ8Q" name="depth">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mCNBkOLcEeiS-ZARNzPJ8Q" name="prev_ex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_FivJAGgvEeijRtS4FXxxtA" name="CUTE_Commands">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_FiiUsGgvEeijRtS4FXxxtA" name="CUTE_Commands">
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_Fi0okGgvEeijRtS4FXxxtA" client="_FiiUsGgvEeijRtS4FXxxtA" supplier="_FiyMUGgvEeijRtS4FXxxtA" contract="_FiyMUGgvEeijRtS4FXxxtA"/>
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_Fi9LcGgvEeijRtS4FXxxtA" client="_FiiUsGgvEeijRtS4FXxxtA" supplier="_Fi6vMGgvEeijRtS4FXxxtA" contract="_Fi6vMGgvEeijRtS4FXxxtA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_FiyMUGgvEeijRtS4FXxxtA" name="CUTE_Commands">
          <ownedOperation xmi:type="uml:Operation" xmi:id="_OdOXwGgvEeijRtS4FXxxtA" name="newBranch">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_Pgb7wH_qEeiMFcUmhpquNg" name="branch_name">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_YYvo4GgzEeijRtS4FXxxtA" name="newState">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_vwVpUH5LEeipA49rzMw2KQ" name="state_name">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_Yik6UGgzEeijRtS4FXxxtA" name="newTransition">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_RHk4sH_qEeiMFcUmhpquNg" name="transition_name">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_KK4GkOE1EeiBkYD2qJeUwg" name="newIteration"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_Fi3r4GgvEeijRtS4FXxxtA" name="CUTE_Commands~">
          <ownedOperation xmi:type="uml:Operation" xmi:id="_a9H34Gg4EeijRtS4FXxxtA" name="reset"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_Cvc58ORuEeiwK5UPZ22vmQ" name="loopBack"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_Fi5hEGgvEeijRtS4FXxxtA" client="_FiiUsGgvEeijRtS4FXxxtA" supplier="_Fi3r4GgvEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Fi6IIGgvEeijRtS4FXxxtA" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_Fi6vMGgvEeijRtS4FXxxtA" name="CUTE_CommandsIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_Fi9ygGgvEeijRtS4FXxxtA" client="_FiiUsGgvEeijRtS4FXxxtA" supplier="_Fi6vMGgvEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_OdRbEGgvEeijRtS4FXxxtA" operation="_OdOXwGgvEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_YYw3AGgzEeijRtS4FXxxtA" operation="_YYvo4GgzEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_YilhYGgzEeijRtS4FXxxtA" operation="_Yik6UGgzEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_a97JIGg4EeijRtS4FXxxtA" operation="_a9H34Gg4EeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_KK5UsOE1EeiBkYD2qJeUwg" operation="_KK4GkOE1EeiBkYD2qJeUwg"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_CveIEORuEeiwK5UPZ22vmQ" operation="_Cvc58ORuEeiwK5UPZ22vmQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_CV8wAGhHEeijRtS4FXxxtA" name="CUTE_Settings">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_CV8wAWhHEeijRtS4FXxxtA" name="CUTE_Settings">
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_CV8wAmhHEeijRtS4FXxxtA" client="_CV8wAWhHEeijRtS4FXxxtA" supplier="_CV8wBGhHEeijRtS4FXxxtA" contract="_CV8wBGhHEeijRtS4FXxxtA"/>
          <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_CV8wA2hHEeijRtS4FXxxtA" client="_CV8wAWhHEeijRtS4FXxxtA" supplier="_CV8wDGhHEeijRtS4FXxxtA" contract="_CV8wDGhHEeijRtS4FXxxtA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CV8wBGhHEeijRtS4FXxxtA" name="CUTE_Settings">
          <ownedOperation xmi:type="uml:Operation" xmi:id="_JgeAgGhIEeijRtS4FXxxtA" name="start">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_LskrsGhIEeijRtS4FXxxtA" name="strategy">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_LsxgAGhIEeijRtS4FXxxtA" name="execTime">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_VLeEMN7aEeiBkYD2qJeUwg" name="totalIterations">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_LsrZYGhIEeijRtS4FXxxtA" name="transitionIterations">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CV8wCGhHEeijRtS4FXxxtA" name="CUTE_Settings~"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_CV8wCmhHEeijRtS4FXxxtA" client="_CV8wAWhHEeijRtS4FXxxtA" supplier="_CV8wCGhHEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_CV8wC2hHEeijRtS4FXxxtA" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_CV8wDGhHEeijRtS4FXxxtA" name="CUTE_SettingsIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_CV8wDWhHEeijRtS4FXxxtA" client="_CV8wAWhHEeijRtS4FXxxtA" supplier="_CV8wDGhHEeijRtS4FXxxtA"/>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_JglVQGhIEeijRtS4FXxxtA" operation="_JgeAgGhIEeijRtS4FXxxtA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_d5YvgGhKEeijRtS4FXxxtA" name="CUTE__MAIN__" classifierBehavior="_d5YvjWhKEeijRtS4FXxxtA" isActive="true">
        <ownedAttribute xmi:type="uml:Property" xmi:id="_d5YvgWhKEeijRtS4FXxxtA" name="harness" visibility="protected" type="_ZSoUsGgnEeijRtS4FXxxtA" isOrdered="true" aggregation="composite"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_d5Yvg2hKEeijRtS4FXxxtA" name="settings" visibility="protected" type="_CV8wAWhHEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="false"/>
        <ownedConnector xmi:type="uml:Connector" xmi:id="_d5YvimhKEeijRtS4FXxxtA" name="RTConnector3">
          <end xmi:type="uml:ConnectorEnd" xmi:id="_d5Yvi2hKEeijRtS4FXxxtA" role="_d5Yvg2hKEeijRtS4FXxxtA"/>
          <end xmi:type="uml:ConnectorEnd" xmi:id="_d5YvjGhKEeijRtS4FXxxtA" partWithPort="_d5YvgWhKEeijRtS4FXxxtA" role="_gsG2IGhHEeijRtS4FXxxtA"/>
        </ownedConnector>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_d5YvjWhKEeijRtS4FXxxtA" name="StateMachineTOP_Test" isReentrant="false">
          <region xmi:type="uml:Region" xmi:id="_d5YvjmhKEeijRtS4FXxxtA" name="Region">
            <transition xmi:type="uml:Transition" xmi:id="_d5Yvj2hKEeijRtS4FXxxtA" name="Initial" source="_d5YvkGhKEeijRtS4FXxxtA" target="_d5YvkWhKEeijRtS4FXxxtA"/>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_d5YvkGhKEeijRtS4FXxxtA"/>
            <subvertex xmi:type="uml:State" xmi:id="_d5YvkWhKEeijRtS4FXxxtA" name="State1">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_d5YvkmhKEeijRtS4FXxxtA" name="Entry" isReentrant="false">
                <language>C++</language>
                <body>//read terminal inputs</body>
              </entry>
            </subvertex>
          </region>
        </ownedBehavior>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_k8svIGgnEeijRtS4FXxxtA" name="Testing_DRC_Capsule">
      <packagedElement xmi:type="uml:Class" xmi:id="_C62aYGgnEeijRtS4FXxxtA" name="CUTE__MAIN__DRC" classifierBehavior="_1XUoUGhEEeijRtS4FXxxtA" isActive="true">
        <ownedAttribute xmi:type="uml:Property" xmi:id="_wtzlsGgnEeijRtS4FXxxtA" name="harness" visibility="protected" type="_ZSoUsGgnEeijRtS4FXxxtA" isOrdered="true" aggregation="composite"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_tCMV8GgvEeijRtS4FXxxtA" name="testsimple" visibility="protected" type="_hpaO8GdiEeiqifykceCvxw" isOrdered="true" aggregation="composite"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_jct8kGhHEeijRtS4FXxxtA" name="settings" visibility="protected" type="_CV8wAWhHEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="false"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_JjTisGm0EeiLpMcT--nfLg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_4Yk0cORnEeiwK5UPZ22vmQ" name="timingInit" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedConnector xmi:type="uml:Connector" xmi:id="_18iawGgvEeijRtS4FXxxtA" name="RTConnector1">
          <end xmi:type="uml:ConnectorEnd" xmi:id="_18kP8GgvEeijRtS4FXxxtA" partWithPort="_wtzlsGgnEeijRtS4FXxxtA" role="_z-v4YGgvEeijRtS4FXxxtA"/>
          <end xmi:type="uml:ConnectorEnd" xmi:id="_18kP8WgvEeijRtS4FXxxtA" partWithPort="_tCMV8GgvEeijRtS4FXxxtA" role="_GQwmUGdjEeiqifykceCvxw"/>
        </ownedConnector>
        <ownedConnector xmi:type="uml:Connector" xmi:id="_3ASWwGgvEeijRtS4FXxxtA" name="RTConnector2">
          <end xmi:type="uml:ConnectorEnd" xmi:id="_3AUL8GgvEeijRtS4FXxxtA" partWithPort="_wtzlsGgnEeijRtS4FXxxtA" role="_rximYGgvEeijRtS4FXxxtA"/>
          <end xmi:type="uml:ConnectorEnd" xmi:id="_3AUL8WgvEeijRtS4FXxxtA" partWithPort="_tCMV8GgvEeijRtS4FXxxtA" role="_ugLW4GgvEeijRtS4FXxxtA"/>
        </ownedConnector>
        <ownedConnector xmi:type="uml:Connector" xmi:id="_nU5IAGhHEeijRtS4FXxxtA" name="RTConnector3">
          <end xmi:type="uml:ConnectorEnd" xmi:id="_nU69MGhHEeijRtS4FXxxtA" role="_jct8kGhHEeijRtS4FXxxtA"/>
          <end xmi:type="uml:ConnectorEnd" xmi:id="_nU7kQGhHEeijRtS4FXxxtA" partWithPort="_wtzlsGgnEeijRtS4FXxxtA" role="_gsG2IGhHEeijRtS4FXxxtA"/>
        </ownedConnector>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_1XUoUGhEEeijRtS4FXxxtA" name="StateMachineTOP_Test" isReentrant="false">
          <region xmi:type="uml:Region" xmi:id="_1XoKUGhEEeijRtS4FXxxtA" name="Region">
            <transition xmi:type="uml:Transition" xmi:id="_1Xx7UGhEEeijRtS4FXxxtA" name="Initial" source="_1XtC0GhEEeijRtS4FXxxtA" target="_y1C6cORnEeiwK5UPZ22vmQ"/>
            <transition xmi:type="uml:Transition" xmi:id="_0z7B8ORnEeiwK5UPZ22vmQ" name="" kind="external" source="_y1C6cORnEeiwK5UPZ22vmQ" target="_1XwGIGhEEeijRtS4FXxxtA">
              <trigger xmi:type="uml:Trigger" xmi:id="__Bd0AORnEeiwK5UPZ22vmQ" port="_4Yk0cORnEeiwK5UPZ22vmQ">
                <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_1XtC0GhEEeijRtS4FXxxtA"/>
            <subvertex xmi:type="uml:State" xmi:id="_1XwGIGhEEeijRtS4FXxxtA" name="Starting">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_7bLoMGhEEeijRtS4FXxxtA" name="Entry" isReentrant="false">
                <language>C++</language>
                <body>char* strategy = &quot;DFS&quot;; //default strategy
int transitionIterations = 5; //default
int time = 0; //default time
int totalIterations = 0;
//read terminal inputs
int argc = UMLRTMain::getArgCount();
log.log(&quot;params count: %d&quot;, argc);
if (argc==1) {
	const char * arg = UMLRTMain::getArg(0);
	if (!strcmp(arg, &quot;-h&quot;)) {
		log.log(&quot; -ac : options for running the action code on transitions: comp, df &quot;);
		log.log(&quot; -nt : options for selecting the next transition, either random, max branches, or transition depenencies: rand, branch, dep &quot;);
		log.log(&quot; example run : ./ConcolicMain -nt random  —-—this command runs the concolic testing and when multiple outgoing transitions are available, randomly picks one &quot;);
	} else {
		time = atoi(arg);
		settings.start(strategy, time, totalIterations, transitionIterations).send();
	}
}
else if (argc>=2) {
	const char * arg = UMLRTMain::getArg(0);
	//const char * arg1 = UMLRTMain::getArg(1);
	//const char * arg2 = UMLRTMain::getArg(2);
	//log.log(&quot;  0:%s, 1:%s, 2:%s  &quot; , arg, arg1, arg2);

	const char * timeStr = UMLRTMain::getArg(0);
	time = atoi(timeStr);

	const char * totalIterationsStr = UMLRTMain::getArg(1);
	totalIterations = atoi(totalIterationsStr);

	const char * transitionIterationsStr = UMLRTMain::getArg(2);
	if (atoi(transitionIterationsStr)>0) {
		transitionIterations = atoi(transitionIterationsStr);
	}

	settings.start(strategy, time, totalIterations, transitionIterations).send(); //default 5 seconds
}
</body>
              </entry>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_y1C6cORnEeiwK5UPZ22vmQ" name="Init">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_-XMvAORnEeiwK5UPZ22vmQ" name="Entry" isReentrant="false">
                <language>C++</language>
                <body>timingInit.informIn(UMLRTTimespec(0.5,0));</body>
              </entry>
            </subvertex>
          </region>
        </ownedBehavior>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_1gRhQGhKEeijRtS4FXxxtA" name="CUTE__MAIN__" classifierBehavior="_1gRhRmhKEeijRtS4FXxxtA" isActive="true">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_1gRhQWhKEeijRtS4FXxxtA" name="harness" visibility="protected" type="_ZSoUsGgnEeijRtS4FXxxtA" isOrdered="true" aggregation="composite"/>
          <ownedAttribute xmi:type="uml:Port" xmi:id="_1gRhQmhKEeijRtS4FXxxtA" name="settings" visibility="protected" type="_CV8wAWhHEeijRtS4FXxxtA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="false"/>
          <ownedConnector xmi:type="uml:Connector" xmi:id="_1gRhQ2hKEeijRtS4FXxxtA" name="RTConnector3">
            <end xmi:type="uml:ConnectorEnd" xmi:id="_1gRhRGhKEeijRtS4FXxxtA" role="_1gRhQmhKEeijRtS4FXxxtA"/>
            <end xmi:type="uml:ConnectorEnd" xmi:id="_1gRhRWhKEeijRtS4FXxxtA" partWithPort="_1gRhQWhKEeijRtS4FXxxtA" role="_gsG2IGhHEeijRtS4FXxxtA"/>
          </ownedConnector>
          <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_1gRhRmhKEeijRtS4FXxxtA" name="StateMachineTOP_Test" isReentrant="false">
            <region xmi:type="uml:Region" xmi:id="_1gRhR2hKEeijRtS4FXxxtA" name="Region">
              <transition xmi:type="uml:Transition" xmi:id="_1gRhSGhKEeijRtS4FXxxtA" name="Initial" source="_1gRhSWhKEeijRtS4FXxxtA" target="_1gRhSmhKEeijRtS4FXxxtA"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_1gRhSWhKEeijRtS4FXxxtA"/>
              <subvertex xmi:type="uml:State" xmi:id="_1gRhSmhKEeijRtS4FXxxtA" name="State1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_1gRhS2hKEeijRtS4FXxxtA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>//read terminal inputs</body>
                </entry>
              </subvertex>
            </region>
          </ownedBehavior>
        </nestedClassifier>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_TEwR0H5PEeipA49rzMw2KQ" name="STATES">
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEwR0X5PEeipA49rzMw2KQ" name="SETUP"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEwR0n5PEeipA49rzMw2KQ" name="FILLING"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEwR035PEeipA49rzMw2KQ" name="ABORTED"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEwR1H5PEeipA49rzMw2KQ" name="DYEING"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEwR1X5PEeipA49rzMw2KQ" name="DRAINING"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_HhfGEH8XEeipA49rzMw2KQ" name="DONE"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_pA-mIN7GEeiBkYD2qJeUwg" name="INIT"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_xiwcgH_oEeiMFcUmhpquNg" name="TRANSITIONS">
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwcgX_oEeiMFcUmhpquNg" name="T1"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwcgn_oEeiMFcUmhpquNg" name="T2"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwcg3_oEeiMFcUmhpquNg" name="T4"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwchH_oEeiMFcUmhpquNg" name="T5"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwchX_oEeiMFcUmhpquNg" name="T6"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_xiwchn_oEeiMFcUmhpquNg" name="T7"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_6OLUgH_oEeiMFcUmhpquNg" name="RESET1"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_6RrUcH_oEeiMFcUmhpquNg" name="RESET2"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_rxcvwH_pEeiMFcUmhpquNg" name="INITIAL"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_zDkvAH_oEeiMFcUmhpquNg" name="BRANCHES">
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvAX_oEeiMFcUmhpquNg" name="B1"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvAn_oEeiMFcUmhpquNg" name="B2"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvA3_oEeiMFcUmhpquNg" name="B3"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvBH_oEeiMFcUmhpquNg" name="B4"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvBX_oEeiMFcUmhpquNg" name="B5"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_zDkvBn_oEeiMFcUmhpquNg" name="B6"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_u2rbUH_pEeiMFcUmhpquNg" name="B7"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_u7jUQH_pEeiMFcUmhpquNg" name="B8"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_KtfVoICkEeib_vS042iOdQ" name="B9"/>
      <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_Kz9xEICkEeib_vS042iOdQ" name="B10"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_p_XqAJK0EeiPG4gJcsWGbA" name="CUT_Attributes">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_wtEREJK0EeiPG4gJcsWGbA" name="Temprature">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xWzKkJK0EeiPG4gJcsWGbA" name="DesiredLevel">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_xZlY0JK0EeiPG4gJcsWGbA" name="HighTemps">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_fuzjc2diEeiqifykceCvxw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_fuzjdGdiEeiqifykceCvxw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_fuzjdWdiEeiqifykceCvxw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_fuzjdmdiEeiqifykceCvxw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_fuzjd2diEeiqifykceCvxw">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_fuzjeGdiEeiqifykceCvxw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_hphjsGdiEeiqifykceCvxw" base_Class="_hpaO8GdiEeiqifykceCvxw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_jRHzoGdiEeiqifykceCvxw" base_Pseudostate="_jREJQGdiEeiqifykceCvxw"/>
  <UMLRTStateMachines:RTState xmi:id="_jRNTMGdiEeiqifykceCvxw" base_State="_jRLeAGdiEeiqifykceCvxw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_jRQWgGdiEeiqifykceCvxw" base_Region="_jRBF8GdiEeiqifykceCvxw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_jRXEMGdiEeiqifykceCvxw" base_StateMachine="_jPbKgGdiEeiqifykceCvxw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_oIWoUGdiEeiqifykceCvxw" base_Package="_oIUzIGdiEeiqifykceCvxw"/>
  <UMLRealTime:RTMessageSet xmi:id="_oIZroGdiEeiqifykceCvxw" base_Interface="_oIYdgGdiEeiqifykceCvxw"/>
  <UMLRealTime:RTMessageSet xmi:id="_oId9EGdiEeiqifykceCvxw" base_Interface="_oIcu8GdiEeiqifykceCvxw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_oIhAYGdiEeiqifykceCvxw" base_Interface="_oIfyQGdiEeiqifykceCvxw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_oIi1kGdiEeiqifykceCvxw" base_Collaboration="_oIRIwGdiEeiqifykceCvxw"/>
  <UMLRTStateMachines:RTState xmi:id="_xgVEUGdiEeiqifykceCvxw" base_State="_xgSBAGdiEeiqifykceCvxw"/>
  <UMLRealTime:RTPort xmi:id="_GQzCkGdjEeiqifykceCvxw" base_Port="_GQwmUGdjEeiqifykceCvxw"/>
  <UMLRealTime:RTPort xmi:id="_M47XsGdkEeiqifykceCvxw" isWired="false" base_Port="_M4ddoGdkEeiqifykceCvxw"/>
  <UMLRealTime:Capsule xmi:id="_C70DsGgnEeijRtS4FXxxtA" base_Class="_C62aYGgnEeijRtS4FXxxtA"/>
  <UMLRealTime:Capsule xmi:id="_ZS3lRmgnEeijRtS4FXxxtA" base_Class="_ZSoUsGgnEeijRtS4FXxxtA"/>
  <UMLRealTime:CapsulePart xmi:id="_wt2pAGgnEeijRtS4FXxxtA" base_Property="_wtzlsGgnEeijRtS4FXxxtA"/>
  <UMLRealTime:ProtocolContainer xmi:id="_FiwXIGgvEeijRtS4FXxxtA" base_Package="_FivJAGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTMessageSet xmi:id="_Fi0BgGgvEeijRtS4FXxxtA" base_Interface="_FiyMUGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTMessageSet xmi:id="_Fi46AGgvEeijRtS4FXxxtA" base_Interface="_Fi3r4GgvEeijRtS4FXxxtA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Fi8kYGgvEeijRtS4FXxxtA" base_Interface="_Fi6vMGgvEeijRtS4FXxxtA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_Fi-ZkGgvEeijRtS4FXxxtA" base_Collaboration="_FiiUsGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_rxp7IGgvEeijRtS4FXxxtA" base_Port="_rximYGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:CapsulePart xmi:id="_tCOyMGgvEeijRtS4FXxxtA" base_Property="_tCMV8GgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_ugNzIGgvEeijRtS4FXxxtA" base_Port="_ugLW4GgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_z-yUoGgvEeijRtS4FXxxtA" base_Port="_z-v4YGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTConnector xmi:id="_18k3AGgvEeijRtS4FXxxtA" base_Connector="_18iawGgvEeijRtS4FXxxtA"/>
  <UMLRealTime:RTConnector xmi:id="_3AUL8mgvEeijRtS4FXxxtA" base_Connector="_3ASWwGgvEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_FrK20GgwEeijRtS4FXxxtA" base_Pseudostate="_FrJBoGgwEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTState xmi:id="_FrNTEGgwEeijRtS4FXxxtA" base_State="_FrLd4GgwEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_FrN6IGgwEeijRtS4FXxxtA" base_Region="_FrHMcGgwEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_FrRkgGgwEeijRtS4FXxxtA" base_StateMachine="_FrDiEGgwEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Gj9DgGgxEeijRtS4FXxxtA" base_Region="_GjyEYGgxEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTState xmi:id="_UtqJIGgxEeijRtS4FXxxtA" base_State="_UtmewGgxEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_iqJSIGgxEeijRtS4FXxxtA" isWired="false" base_Port="_iqHc8GgxEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_wUtksGgxEeijRtS4FXxxtA" isWired="false" base_Port="_wUrIcGgxEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_1Xu4AGhEEeijRtS4FXxxtA" base_Pseudostate="_1XtC0GhEEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTState xmi:id="_1XxUQGhEEeijRtS4FXxxtA" base_State="_1XwGIGhEEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_1XyiYGhEEeijRtS4FXxxtA" base_Region="_1XoKUGhEEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_1X1lsGhEEeijRtS4FXxxtA" base_StateMachine="_1XUoUGhEEeijRtS4FXxxtA"/>
  <UMLRealTime:ProtocolContainer xmi:id="_CV9XEGhHEeijRtS4FXxxtA" base_Package="_CV8wAGhHEeijRtS4FXxxtA"/>
  <UMLRealTime:Protocol xmi:id="_CV9-IGhHEeijRtS4FXxxtA" base_Collaboration="_CV8wAWhHEeijRtS4FXxxtA"/>
  <UMLRealTime:RTMessageSet xmi:id="_CV-lMGhHEeijRtS4FXxxtA" base_Interface="_CV8wBGhHEeijRtS4FXxxtA"/>
  <UMLRealTime:RTMessageSet xmi:id="_CV-lMWhHEeijRtS4FXxxtA" base_Interface="_CV8wCGhHEeijRtS4FXxxtA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_CV_MQGhHEeijRtS4FXxxtA" base_Interface="_CV8wDGhHEeijRtS4FXxxtA" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_gsKggGhHEeijRtS4FXxxtA" base_Port="_gsG2IGhHEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_jcvxwGhHEeijRtS4FXxxtA" base_Port="_jct8kGhHEeijRtS4FXxxtA"/>
  <UMLRealTime:RTConnector xmi:id="_nU7kQWhHEeijRtS4FXxxtA" base_Connector="_nU5IAGhHEeijRtS4FXxxtA"/>
  <UMLRealTime:Capsule xmi:id="_d5doAGhKEeijRtS4FXxxtA" base_Class="_d5YvgGhKEeijRtS4FXxxtA"/>
  <UMLRealTime:CapsulePart xmi:id="_d5ePEGhKEeijRtS4FXxxtA" base_Property="_d5YvgWhKEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_d5e2IGhKEeijRtS4FXxxtA" base_Port="_d5Yvg2hKEeijRtS4FXxxtA"/>
  <UMLRealTime:RTConnector xmi:id="_d5fdMWhKEeijRtS4FXxxtA" base_Connector="_d5YvimhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_d5gEQGhKEeijRtS4FXxxtA" base_StateMachine="_d5YvjWhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_d5gEQWhKEeijRtS4FXxxtA" base_Region="_d5YvjmhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_d5grUGhKEeijRtS4FXxxtA" base_Pseudostate="_d5YvkGhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTState xmi:id="_d5grUWhKEeijRtS4FXxxtA" base_State="_d5YvkWhKEeijRtS4FXxxtA"/>
  <UMLRealTime:Capsule xmi:id="_1gUkkGhKEeijRtS4FXxxtA" base_Class="_1gRhQGhKEeijRtS4FXxxtA"/>
  <UMLRealTime:CapsulePart xmi:id="_1gVLoGhKEeijRtS4FXxxtA" base_Property="_1gRhQWhKEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_1gVysGhKEeijRtS4FXxxtA" base_Port="_1gRhQmhKEeijRtS4FXxxtA"/>
  <UMLRealTime:RTConnector xmi:id="_1gVysWhKEeijRtS4FXxxtA" base_Connector="_1gRhQ2hKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_1gWZwGhKEeijRtS4FXxxtA" base_StateMachine="_1gRhRmhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_1gWZwWhKEeijRtS4FXxxtA" base_Region="_1gRhR2hKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_1gXA0GhKEeijRtS4FXxxtA" base_Pseudostate="_1gRhSWhKEeijRtS4FXxxtA"/>
  <UMLRTStateMachines:RTState xmi:id="_1gXA0WhKEeijRtS4FXxxtA" base_State="_1gRhSmhKEeijRtS4FXxxtA"/>
  <UMLRealTime:RTPort xmi:id="_JjnrwGm0EeiLpMcT--nfLg" isWired="false" base_Port="_JjTisGm0EeiLpMcT--nfLg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_QTsRYGm0EeiLpMcT--nfLg" headerPreface="#include &quot;umlrtmain.hh&quot;" base_Class="_C62aYGgnEeijRtS4FXxxtA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_YL6b8G7EEeiLpMcT--nfLg" headerPreface="#include &lt;assert.h>&#xA;#include &lt;stdio.h>&#xA;//#include &lt;sys/time.h>&#xA;#include &lt;iostream>&#xA;#include &lt;fstream>&#xA;#include &lt;string>&#xA;#include &lt;vector>&#xA;#include &lt;map>&#xA;&#xA;#include &lt;limits>&#xA;#include &lt;cstdlib>&#xA;&#xA;#include &lt;ctime>&#xA;&#xA;#include &lt;concolic_search.h>&#xA;#include &lt;fileutil.h>&#xA;#include &lt;coverage_util.h>&#xA;#include &quot;base/basic_types.h&quot;&#xA;#include &quot;base/symbolic_execution.h&quot;&#xA;#include &quot;base/symbolic_expression.h&quot;&#xA;#include &quot;base/symbolic_interpreter.h&quot;&#xA;#include &quot;base/symbolic_path.h&quot;&#xA;#include &quot;base/symbolic_predicate.h&quot;&#xA;#include &quot;base/yices_solver.h&quot;&#xA;&#xA;&#xA;#include &quot;STATES.hh&quot;&#xA;#include &quot;TRANSITIONS.hh&quot;&#xA;#include &quot;BRANCHES.hh&quot;&#xA;&#xA;using namespace mcute;" headerEnding="" implementationPreface="using namespace std;&#xA;using namespace mcute;" base_Class="_ZSoUsGgnEeijRtS4FXxxtA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_6u_EAH5SEeipA49rzMw2KQ" headerPreface="#include &quot;STATES.hh&quot;&#xA;#include &quot;TRANSITIONS.hh&quot;&#xA;#include &quot;BRANCHES.hh&quot;&#xA;&#xA;#include &quot;CUT_Attributes.hh&quot;&#xA;&#xA;&#xA;#include &lt;map>&#xA;#include &lt;vector>&#xA;#include &lt;iostream>&#xA;#include &lt;string>&#xA;&#xA;#include &quot;libcrest/crest.h&quot;" base_Class="_hpaO8GdiEeiqifykceCvxw"/>
  <RTCppProperties:AttributeProperties xmi:id="_bHwlUH5XEeipA49rzMw2KQ" type="string" base_Property="_dxTFUH5VEeipA49rzMw2KQ"/>
  <UMLRTStateMachines:RTState xmi:id="_2YpuEH_gEeiMFcUmhpquNg" base_State="_2YhyQH_gEeiMFcUmhpquNg"/>
  <RTCppProperties:AttributeProperties xmi:id="_JDiJwH_qEeiMFcUmhpquNg" type="vector&lt;int>" base_Property="_ErnuUH_qEeiMFcUmhpquNg"/>
  <RTCppProperties:AttributeProperties xmi:id="_ruklcH_qEeiMFcUmhpquNg" type="vector&lt;int>" base_Property="_rujXUH_qEeiMFcUmhpquNg"/>
  <RTCppProperties:AttributeProperties xmi:id="_r5TOwH_qEeiMFcUmhpquNg" type="vector&lt;int>" base_Property="_r5SAoH_qEeiMFcUmhpquNg"/>
  <RTCppProperties:AttributeProperties xmi:id="_rs314ICmEeib_vS042iOdQ" type="map&lt;int,int>" base_Property="_rs2nwICmEeib_vS042iOdQ"/>
  <RTCppProperties:AttributeProperties xmi:id="_H550gIVWEeiKGobklzfqdw" type="mcute::Search*" base_Property="_DtF10IVWEeiKGobklzfqdw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cFwysKPHEeii3rHGIK9rRQ" base_Pseudostate="_cBWz0KPHEeii3rHGIK9rRQ"/>
  <UMLRTStateMachines:RTState xmi:id="_blLvYN7GEeiBkYD2qJeUwg" base_State="_bigO0N7GEeiBkYD2qJeUwg"/>
  <UMLRTStateMachines:RTState xmi:id="_joeiUOE1EeiBkYD2qJeUwg" base_State="_jodUMOE1EeiBkYD2qJeUwg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KNHs0OE2EeiBkYD2qJeUwg" base_Pseudostate="_KNFQkOE2EeiBkYD2qJeUwg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TIjE0OE4EeiBkYD2qJeUwg" base_Pseudostate="_TIhPoOE4EeiBkYD2qJeUwg"/>
  <UMLRTStateMachines:RTState xmi:id="_vFLqkOIDEeitsrWbfpHoZQ" base_State="_vFIAMOIDEeitsrWbfpHoZQ"/>
  <UMLRealTime:RTPort xmi:id="_Sk7j4OIIEeitsrWbfpHoZQ" isPublish="false" isWired="false" base_Port="_SkthcOIIEeitsrWbfpHoZQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_xEHUEOIREeitsrWbfpHoZQ" type="const SymbolicExecution&amp;" base_Parameter="_g5xMYOIREeitsrWbfpHoZQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_zBuQQOIREeitsrWbfpHoZQ" type="size_t" base_Parameter="_hydu8OIREeitsrWbfpHoZQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_z8blAOIREeitsrWbfpHoZQ" type="vector&lt;value_t>&amp;" base_Parameter="_h2-bgOIREeitsrWbfpHoZQ"/>
  <UMLRTStateMachines:RTState xmi:id="_nNnb4OLIEeiS-ZARNzPJ8Q" base_State="_nNdD0OLIEeiS-ZARNzPJ8Q"/>
  <UMLRealTime:RTPort xmi:id="_hettcOLKEeiS-ZARNzPJ8Q" isPublish="false" isWired="false" base_Port="_hekjgOLKEeiS-ZARNzPJ8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_sNI50OLcEeiS-ZARNzPJ8Q" type="SymbolicExecution&amp;" base_Parameter="_mCNBkOLcEeiS-ZARNzPJ8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_uG2NcOLcEeiS-ZARNzPJ8Q" type="size_t" base_Parameter="_lTceIOLcEeiS-ZARNzPJ8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_P8bMEONyEeiS-ZARNzPJ8Q" base_State="_P8Yv0ONyEeiS-ZARNzPJ8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_tQidMOOwEeiS-ZARNzPJ8Q" base_State="_tQgA8OOwEeiS-ZARNzPJ8Q"/>
  <UMLRealTime:RTPort xmi:id="_8clJkOOwEeiS-ZARNzPJ8Q" isPublish="false" isWired="false" base_Port="_8ciGQOOwEeiS-ZARNzPJ8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KISwkOQ-EeitooxfkYAKHg" base_Pseudostate="_KIQUUOQ-EeitooxfkYAKHg"/>
  <UMLRTStateMachines:RTState xmi:id="_-9-cIORcEeiwK5UPZ22vmQ" base_State="_-97_4ORcEeiwK5UPZ22vmQ"/>
  <UMLRTStateMachines:RTState xmi:id="_ayW9gORnEeiwK5UPZ22vmQ" base_State="_ayVIUORnEeiwK5UPZ22vmQ"/>
  <UMLRTStateMachines:RTState xmi:id="_y1EvoORnEeiwK5UPZ22vmQ" base_State="_y1C6cORnEeiwK5UPZ22vmQ"/>
  <UMLRealTime:RTPort xmi:id="_4Yps8ORnEeiwK5UPZ22vmQ" isPublish="false" isWired="false" base_Port="_4Yk0cORnEeiwK5UPZ22vmQ"/>
  <RTCppProperties:AttributeProperties xmi:id="_PsAQwOavEeiwK5UPZ22vmQ" type="coverage_util" base_Property="_KvXXoOavEeiwK5UPZ22vmQ"/>
</xmi:XMI>
